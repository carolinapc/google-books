# Update develop branch from master every time a push is done in master branch
name: Check - Update Develop Branch
on:
  push:
    branches:
      - master

# need to keep 2 blank lines after this permissions assignment (dont know why but without that it breaks the push step not allowing to push with github_token)
permissions: write-all


env:
  # name of merge branch to be created
  MERGE_BRANCH: merge-branch-${{ github.run_id }}
  # name of merge branch in case of conflicts
  CONFLICTED_MERGE_BRANCH: pending-merge-branch
  # branch to be updated with changes from master
  BRANCH_TO_UPDATE: develop
  TESTING: red

jobs:

  update-develop:
    runs-on: ubuntu-latest

    steps:
      - name: Info
        run: |
            echo Branch updated: $(basename ${{ github.ref }})
            echo Branch to be updated: ${{ env.BRANCH_TO_UPDATE }}
            exit 1;
      
      - name: Creating Env variable
        run: |
          echo "MY_COLOR=yellow" >> "$GITHUB_ENV"
          echo "TESTING=yellow" >> "$GITHUB_ENV"

      - name: Changing Env variable
        run: |
          echo "MY_COLOR=blue" >> "$GITHUB_ENV"

      - name: Printing Env variable
        run: |
          echo "MY_COLOR is ${MY_COLOR}"
          echo "TESTING is ${{ env.TESTING }}"
      
      - name: Printing Env variable if testing is yellow
        if: ${{ env.TESTING == 'yellow' }}
        run: |
          echo "MY_COLOR is ${MY_COLOR}"
          echo "TESTING is ${{ env.TESTING }}"

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Configure credentials
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "Github Actions"

      - name: Create merge branch from ${{ github.ref }}
        id: create-branch
        run: |
          git checkout -b ${{ env.MERGE_BRANCH }}
          git status

      - name: Update new branch from ${{ env.BRANCH_TO_UPDATE }}
        id: update-merge-branch
        run: |
          # set to ignore errors
          set +e
          fileToIgnore=./pom/garden-versions-pom/pom.xml
          CONFLICTS_TO_SOLVE=false
          ACTUAL_MERGE_BRANCH=${{ env.MERGE_BRANCH }}
          CREATE_PR=true

          git merge origin/${{ env.BRANCH_TO_UPDATE }}

          # in case of errors, likely conflicted files
          if [ $? -ne 0 ]; then
            # check how many files has conflicts 
            totalConflicted=$(git status --short | grep "^UU" | wc -l)

            # check whether the ignored file had conflict
            ignoredfileHasConflict=$(git status --short | grep "^UU $fileToIgnore" | wc -l)

            # if the conflict was only the ignored file, solve it.
            if [[ $totalConflicted == 1 && $ignoredfileHasConflict == 1 ]]; then
                echo "Only ${fileToIgnore} got conflicts, so kept theirs (what it is in ${{ env.BRANCH_TO_UPDATE }} branch) to solve it."
                git checkout --theirs $fileToIgnore
                git add $fileToIgnore
                git commit -m "Fix conflict in $fileToIgnore file by choosing the file in ${{ env.BRANCH_TO_UPDATE }}."
            else
                # set to stop on errors
                set -e
                CREATE_PR=false
                CONFLICTS_TO_SOLVE=true
                ACTUAL_MERGE_BRANCH=${{ env.CONFLICTED_MERGE_BRANCH }}

                echo "Couldn't solve conflicts automatically. Merge from ${{ github.ref}} was aborted to be manually solved in the branch ${{ env.CONFLICTED_MERGE_BRANCH }}."
                git merge --abort

                # check if there is already a pending merge branch created
                if [[ $(git branch --list -a origin/${{ env.CONFLICTED_MERGE_BRANCH }} | wc -l) == 0 ]]; then
                  echo "Renaming branch ${{ env.MERGE_BRANCH }} to ${{ env.CONFLICTED_MERGE_BRANCH }}, as there is no pending merge branch created yet."
                  git branch -m ${{ env.MERGE_BRANCH }} ${{ env.CONFLICTED_MERGE_BRANCH }}
                  CREATE_PR=true
                fi

                git status
            fi
          fi

          echo "CONFLICTS_TO_SOLVE=${CONFLICTS_TO_SOLVE}" >> "$GITHUB_OUTPUT"
          echo "ACTUAL_MERGE_BRANCH=${ACTUAL_MERGE_BRANCH}" >> "$GITHUB_OUTPUT"
          echo "CREATE_PR=${CREATE_PR}" >> "$GITHUB_OUTPUT"

      - name: Outputs from previous step
        run: |
          echo "CREATE_PR=${{ steps.update-merge-branch.outputs.CREATE_PR }}"
          echo "ACTUAL_MERGE_BRANCH=${{ steps.update-merge-branch.outputs.ACTUAL_MERGE_BRANCH }}"
          echo "CONFLICTS_TO_SOLVE=${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE }}"

      - name: Push changes to merge branch if a PR can be created
        if: ${{ steps.update-merge-branch.outputs.CREATE_PR == 'true' }}
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ steps.update-merge-branch.outputs.ACTUAL_MERGE_BRANCH }}
          github_token: ${{ secrets.GITHUB_TOKEN }}          

      - name: Create pull request
        if: ${{ steps.update-merge-branch.outputs.CREATE_PR == 'true' }}
        id: create-pr
        run: |
          RESPONSE=$( curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{"title": "Update Develop Branch", "head": "${{ steps.update-merge-branch.outputs.ACTUAL_MERGE_BRANCH }}", "base": "${{ env.BRANCH_TO_UPDATE }}", "body": "This pull request updates ${{ env.BRANCH_TO_UPDATE }} branch with changes from master branch."}' )
          
          PR_NUMBER=$(echo $RESPONSE | jq -r '.number')
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo $RESPONSE
          echo PR number is $PR_NUMBER

          if [[ -z "$PR_NUMBER" || $PR_NUMBER == "null" ]]; then
            echo "PR_NUMBER is empty. Likely an issue with the request to create the PR. Please check the response."
            exit 1;
          fi

      - name: Approve pull request automatically if there is no conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'false' }}
        run: |
          RESPONSE=$( curl -X POST \
            -H "Authorization: Bearer ${{ secrets.CAROL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.create-pr.outputs.PR_NUMBER }}/reviews \
            -d '{"event": "APPROVE"}' )

          STATE=$(echo $RESPONSE | jq -r '.state')
          echo $RESPONSE
          echo PR review state is $STATE

          if [[ -z "$STATE" || $STATE == "null" ]]; then
            echo "STATE is empty. Likely an issue with the request to approve the PR. Please check the response."
            exit 1;
          fi

      - name: Add label to the pull request to set merge method (merge commit)
        if: ${{ steps.update-merge-branch.outputs.CREATE_PR == 'true' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: merge-method:merge
          github_token: ${{ secrets.CAROL_ACCESS_TOKEN }}
          number: ${{ steps.create-pr.outputs.PR_NUMBER }}

      - name: Add label to the pull request to start merging process if there is no conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'false' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: command:queue-for-merging
          github_token: ${{ secrets.CAROL_ACCESS_TOKEN }}
          number: ${{ steps.create-pr.outputs.PR_NUMBER }}

      - name: Notify if conflicts
        if: ${{ steps.update-merge-branch.outputs.CONFLICTS_TO_SOLVE == 'true' }}
        run: |
          RESPONSE=$(curl -X GET -H "Authorization: Bearer ${{ secrets.CAROL_ACCESS_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ env.CONFLICTED_MERGE_BRANCH }})
          PR_NUMBER=$(echo $RESPONSE | jq -r '.[0].number')
          PR_URL=$(echo $RESPONSE | jq -r '.[0].html_url')
          echo "There are conflicts in merge branch, so the pull request number $PR_NUMBER was created but not automatically merged."
          echo "Here is the link to the PR: ${PR_URL}"
          echo "Please solve the conflicts in the branch ${{ env.CONFLICTED_MERGE_BRANCH }} and then merge it to ${{ env.BRANCH_TO_UPDATE }} branch."
      
      - name: Notify if any errors
        if: failure()
        run: |
          echo "There are errors in the workflow. Please check logs."
          echo "TESTING=yellow" >> "$GITHUB_ENV"

      - name: Slack
        if: ${{ always() && env.TESTING != 'none' }}
        run: |
          echo "TESTING is ${{ env.TESTING }}"

      - name: Notify issue via slack
        if: ${{ always() && env.SLACK_MESSAGE != 'none' }}
        id: slack
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }} # required
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>. Please check the logs in {workflow_url}.\n TESTING:\n ${{ env.SLACK_MESSAGE }}"
        env:
          SLACK_WEBHOOK_URL: 1234

      # TODO: Create slack app and add the webhook url to secrets - https://www.ravsam.in/blog/collect-form-responses-using-google-apps-script/#creating-a-slack-bot
      # - name: Notify issue via slack
      #   if: failure()
      #   uses: ravsamhq/notify-slack-action@v2
      #   with:
      #     status: ${{ job.status }} # required
      #     message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>. Please check the logs in {workflow_url}"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required        
       
